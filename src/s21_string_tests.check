#include "s21_string.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>


// s21_strlen

#test s21_strlen_1
    char str[1]="";
    ck_assert_int_eq(s21_strlen(str), strlen(str));

#test s21_strlen_2
    char str[2]="1";
    ck_assert_int_eq(s21_strlen(str), strlen(str));

#test s21_strlen_3
    char str[4]="123";
    ck_assert_int_eq(s21_strlen(str), strlen(str));

#test s21_strlen_4
    char str[2]="\0";
    ck_assert_int_eq(s21_strlen(str), strlen(str));

// s21_memcmp_tests

#test s21_memcmp_1
    char str1[1]="";
    char str2[1]="";
    s21_size_t n = 0;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_2
    char str1[1]="";
    char str2[1]="";
    s21_size_t n = 1;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_3
    char str1[2]="1";
    char str2[1]="";
    s21_size_t n = 0;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_4
    char str1[2]="1";
    char str2[1]="";
    s21_size_t n = 1;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_5
    char str1[2]="1";
    char str2[2]="1";
    s21_size_t n = 0;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_6
    char str1[2]="1";
    char str2[2]="1";
    s21_size_t n = 1;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_7
    char str1[2]="1";
    char str2[2]="1";
    s21_size_t n = 2;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_8
    char str1[6]="12345";
    char str2[2]="1";
    s21_size_t n = 1;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_9
    char str1[6]="12345";
    char str2[4]="234";
    s21_size_t n = 4;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

#test s21_memcmp_10
    char str1[6]="12345";
    char str2[6]="12345";
    s21_size_t n = 5;
    ck_assert_int_eq(s21_memcmp(str1, str2, n), memcmp(str1, str2, n));

// s21_strrchr_tests

#test s21_strrchr_test_1
    char str[1]="";
    char cr = '\0';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_2
    char str[1]="";
    char cr = 0;
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_3
    char str[1]="";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_4
    char str[2]="t";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_5
    char str[2]="t";
    char cr = '\0';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_6
    char str[4]="1t3";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_7
    char str[4]="123";
    char cr = 'n';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_8
    char str[4]="123";
    char cr = '\0';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_9
    char str[5]="123t";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_10
    char str[5]="1t3t";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_11
    char str[6]="1t3t5";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_12
    char str[7]="1t3t5t";
    char cr = 't';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_13
    char str[7]="1t3t5t";
    char cr = '\0';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_14
    char str[7]="1t3t5t";
    char cr = 'n';
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

#test s21_strrchr_test_15
    char str[7]="1t3t5t";
    char cr = -1;
    ck_assert_ptr_eq(strrchr(str, cr), s21_strrchr(str, cr));

// s21_strspn_tests

#test s21_strspn_test_1
    char str1[1]="";
    char str2[1]="";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_2
    char str1[2]="\0";
    char str2[1]="";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_3
    char str1[1]="";
    char str2[2]="\0";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_4
    char str1[4]="123";
    char str2[2]="";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_5
    char str1[1]="";
    char str2[4]="123";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_6
    char str1[4]="123";
    char str2[4]="123";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_7
    char str1[4]="123";
    char str2[4]="321";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_8
    char str1[6]="12345";
    char str2[4]="234";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_9
    char str1[6]="12345";
    char str2[4]="234";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_10
    char str1[6]="12345";
    char str2[4]="234";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_11
    char str1[10]="123452345";
    char str2[4]="234";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_12
    char str1[14]="2233443322123";
    char str2[4]="234";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

#test s21_strspn_test_13
    char str1[2]="1";
    char str2[3]="21";
    ck_assert_uint_eq(strspn(str1, str2), s21_strspn(str1, str2));

// s21_strstr_tests

#test s21_strstr_test_1
    char str1[1]="";
    char str2[1]="";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_2
    char str1[4]="123";
    char str2[1]="";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_3
    char str1[1]="";
    char str2[2]=" ";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_4
    char str1[2]=" ";
    char str2[1]="";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_5
    char str1[4]="123";
    char str2[1]="1";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_6
    char str1[4]="123";
    char str2[4]="123";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_7
    char str1[4]="123";
    char str2[3]="12";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_8
    char str1[4]="123";
    char str2[2]="3";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_9
    char str1[4]="123";
    char str2[2]="\0";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_10
    char str1[10]="123abc789";
    char str2[4]="abc";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2)); 

#test s21_strstr_test_11
    char str1[10]="123cba789";
    char str2[4]="abc";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_12
    char str1[10]="123cba789";
    char str2[10]="123cba789";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_13
    char str1[10]="123cba789";
    char str2[4]="zxc";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

#test s21_strstr_test_14
    char str1[16]="123cba789cba345";
    char str2[4]="cba";
    ck_assert_ptr_eq(strstr(str1, str2), s21_strstr(str1, str2));

// s21_strtok_tests

#test s21_strtok_test_1
    char str1_1[1]="";
    char str1_2[1]="";
    char str2_1[1]="";
    char str2_2[1]="";
    ck_assert_ptr_eq(strtok(str1_1, str1_2), s21_strtok(str2_1, str2_2));

#test s21_strtok_test_2
    char str1_1[1]="";
    char str1_2[2]="1";
    char str2_1[1]="";
    char str2_2[2]="1";
    ck_assert_ptr_eq(strtok(str1_1, str1_2), s21_strtok(str2_1, str2_2));

#test s21_strtok_test_3
    char str1_1[8]="123d567";
    char str1_2[2]="d";
    char str2_1[8]="123d567";
    char str2_2[2]="d";
    // init
    char *s = strtok(str1_1, str1_2);
    char *s21 = s21_strtok(str2_1, str2_2);
    ck_assert_str_eq(s, s21);
    // 0
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 1 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);
    // 2 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);

#test s21_strtok_test_4
    char str1_1[10]="12d45dd89";
    char str1_2[2]="d";
    char str2_1[10]="12d45dd89";
    char str2_2[2]="d";
    // init
    char *s = strtok(str1_1, str1_2);
    char *s21 = s21_strtok(str2_1, str2_2);
    ck_assert_str_eq(s, s21);
    // 0
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 1
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 2 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);
    // 3 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);

#test s21_strtok_test_5
    char str1_1[14]="12abc67bcac23";
    char str1_2[4]="abc";
    char str2_1[14]="12abc67bcac23";
    char str2_2[4]="abc";
    // init
    char *s = strtok(str1_1, str1_2);
    char *s21 = s21_strtok(str2_1, str2_2);
    ck_assert_str_eq(s, s21);
    // 0
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 1
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 2 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);
    // 3 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);

#test s21_strtok_test_6
    char str1_1[6]="12abc";
    char str1_2[4]="abc";
    char str2_1[6]="12abc";
    char str2_2[4]="abc";
    // init
    char *s = strtok(str1_1, str1_2);
    char *s21 = s21_strtok(str2_1, str2_2);
    ck_assert_str_eq(s, s21);
    // 0 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);
    // 1 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);

#test s21_strtok_test_7
    char str1_1[16]="12abc67bcac23cb";
    char str1_2[4]="abc";
    char str2_1[16]="12abc67bcac23cb";
    char str2_2[4]="abc";
    // init
    char *s = strtok(str1_1, str1_2);
    char *s21 = s21_strtok(str2_1, str2_2);
    ck_assert_str_eq(s, s21);
    // 0
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 1
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_str_eq(s, s21);
    // 2 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);
    // 3 S21_NULL
    s = strtok(NULL, str1_2);
    s21 = s21_strtok(S21_NULL, str2_2);
    ck_assert_ptr_eq(s, s21);

#test s21_strcmpTests
char s1[20] = "Hello world\0";
    char s3[20] = "a\n\0";
    char s4[20] = " \n\0";
    char s5[6] = " \0";
    char s6[4] = "\n\0";
    char s7[2] = "\0";
    char s8[4] = "aaa";
    char s9[2] = "";
    char s10[20] = "Hello world\0";

    ck_assert_int_eq(s21_strcmp(s5, s7), strcmp(s5, s7));
    ck_assert_int_eq(s21_strcmp(s3, s4), strcmp(s3, s4));
    ck_assert_int_eq(s21_strcmp(s6, s7), strcmp(s6, s7));
    ck_assert_int_eq(s21_strcmp(s8, s9), strcmp(s8, s9));
    ck_assert_int_eq(s21_strcmp(s1, s10), strcmp(s1, s10));

#test s21_strncmpTests
char s3[20] = "a\n\0";
    char s4[20] = " \n\0";
    char s5[6] = " \0";
    char s6[4] = "\n\0";
    char s7[2] = "\0";
    char s8[4] = "aaa";
    char s9[2] = "";

    ck_assert_int_eq(s21_strncmp(s5, s7, 1), strncmp(s5, s7, 1));
    ck_assert_int_eq(s21_strncmp(s5, s7, 2), strncmp(s5, s7, 2));
    ck_assert_int_eq(s21_strncmp(s3, s4, 2), strncmp(s3, s4, 2));
    ck_assert_int_eq(s21_strncmp(s3, s4, 3), strncmp(s3, s4, 3));
    ck_assert_int_eq(s21_strncmp(s6, s7, 1), strncmp(s6, s7, 1));
    ck_assert_int_eq(s21_strncmp(s6, s7, 2), strncmp(s6, s7, 2));
    ck_assert_int_eq(s21_strncmp(s8, s9, 1), strncmp(s8, s9, 1));

#test s21_strcpyTest_1
char str1[20] = "C programming";
char str2[20];
ck_assert_str_eq(s21_strcpy(str2, str1),strcpy(str2, str1));

#test s21_strcpyTest_2
char str1[20] = "";
char str2[20];
ck_assert_str_eq(s21_strcpy(str2, str1),strcpy(str2, str1));

#test s21_strcpyTest_3
char str1[20] = "0";
char str2[20];
ck_assert_str_eq(s21_strcpy(str2, str1),strcpy(str2, str1));

#test s21_strcpyTest_4
char str1[20] = "\0";
char str2[20];
ck_assert_str_eq(s21_strcpy(str2, str1),strcpy(str2, str1));

#test s21_strcpyTest_5
char str1[20] = "34523523464325";
char str2[20];
ck_assert_str_eq(s21_strcpy(str2, str1),strcpy(str2, str1));

#test s21_strncpyTest_1
char str1[20] = "1234567890";
char str2[20] = "1234507890";
ck_assert_str_eq(s21_strncpy(str2, str1, 5),strncpy(str2, str1, 5));

#test s21_strncpyTest_2
char str1[2] = "\0";
char str2[2] = "\0";
ck_assert_str_eq(s21_strncpy(str2, str1, 1),strncpy(str2, str1, 1));

#test s21_strncpyTest_3
char str1[2] = "\0";
char str2[20] = "454235236246";
ck_assert_str_eq(s21_strncpy(str2, str1, 1),strncpy(str2, str1, 1));

#test s21_strncpyTest_4
char str1[20] = "454235236246";
char str2[2] = "\0";
ck_assert_str_eq(s21_strncpy(str2, str1, 1),strncpy(str2, str1, 1));

#test s21_strncpyTest_5
char str1[10] = "ragnar";
char str2[10] = "regnar";
ck_assert_str_eq(s21_strncpy(str2, str1, 3),strncpy(str2, str1, 3));

// memsetTests

#test memsetTest1
char b[15]="1234567890";
char c[15]="1234567890";
ck_assert_str_eq(memset(b, 'f', 4), s21_memset(c, 'f', 4));

#test memsetTest2
char b[15]="1234567890";
char c[15]="1234567890";
ck_assert_str_eq(memset(b, '1', 4), s21_memset(c, '1', 4));

// #test memsetTest3
char a[15]="1234567890";
ck_assert_ptr_eq(memset(a, 'g', 4), s21_memset(a, 'g', 4));

#test memsetTest4
char b[15]="hell01234";
char c[15]="hell01234";
ck_assert_str_eq(memset(b, 'p', 7), s21_memset(c, 'p', 7));

#test memsetTest5
char b[15]="  ";
char c[15]="  ";
ck_assert_str_eq(memset(b, 'p', 7), s21_memset(c, 'p', 7));

// strcatTests

#test strcatTest1
char arr[20] = "hello ";
char arr2[20] = "hello ";
ck_assert_str_eq(strcat(arr, "word"), s21_strcat(arr2, "word"));

#test strcatTest2
char arr[20] = "";
char arr2[20] = "";
ck_assert_str_eq(strcat(arr, ""), s21_strcat(arr2, ""));

#test strcatTest3
char arr[20] = "123";
char arr2[20] = "123";
ck_assert_str_eq(strcat(arr, " "), s21_strcat(arr2, " "));

#test strcatTest4
char arr[20] = "123";
ck_assert_ptr_eq(strcat(arr, " "), s21_strcat(arr, " "));

// strncatTests

#test strncatTest1
char src1[10]="000";
char src2[10]="000";
char app[10]="12345";
char app2[10]="12345";
ck_assert_str_eq(strncat(src1, app, 0), s21_strncat(src2, app2, 0));

#test strncatTest2
char src1[10]="000";
char src2[10]="000";
char app[10]="12345";
char app2[10]="12345";
ck_assert_str_eq(strncat(src1, app, 3), s21_strncat(src2, app2, 3));

#test strncatTest3
char src1[10]="000";
char app[10]="12345";
ck_assert_ptr_eq(strncat(src1, app, 3), s21_strncat(src1, app, 3));


#test strncatTest7
char src1[10]="000";
char app[10]="   ";
ck_assert_ptr_eq(strncat(src1, app, 3), s21_strncat(src1, app, 3));

// strchrTests

#test strchrTest0
char str[11] = "0123456789";
int ch = 'n';
ck_assert_pstr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest1
char str[11] = "0123456789";
int ch = '6';
ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest2
char str[1]="";
char ch = '\0';
ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest3
char str[1]="";
char ch = 0;
ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest4
    char str[1]="";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest5
    char str[2]="t";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest6
    char str[2]="t";
    char ch = '\0';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest7
    char str[4]="1t3";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest8
    char str[4]="123";
    char ch = 'n';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest9
    char str[4]="123";
    char ch = '\0';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest10
    char str[5]="123t";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest11
    char str[5]="1t3t";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest12
    char str[6]="1t3t5";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest13
    char str[7]="1t3t5t";
    char ch = 't';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest14
    char str[7]="1t3t5t";
    char ch = '\0';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strchrTest15
    char str[7]="1t3t5t";
    char ch = 'n';
    ck_assert_ptr_eq(strchr(str, ch), s21_strchr(str, ch));

#test strlen_1
char arr[] = "text";
ck_assert_uint_eq(strlen(arr), s21_strlen(arr));

#test strlen_2
char text[] = "";
ck_assert_uint_eq(strlen(text), s21_strlen(text));

#test strlen_3
char space[] = "    ";
ck_assert_uint_eq(strlen(space), s21_strlen(space));

#test strcspn_1
char arr1[] = "123456";
char arr2[] = "3";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_2
char arr1[] = "123456";
char arr2[] = "8";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_3
char arr1[] = "123456";
char arr2[] = "2";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_4
char arr1[] = "123456";
char arr2[] = "";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_5
char arr1[] = "";
char arr2[] = "2";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_6
char arr1[] = "";
char arr2[] = "";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_7
char* arr1 = "tExTeS";
char* arr2 = "t";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_8
char* arr1 = "tExTeS";
char* arr2 = "E";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strcspn_9
char* arr1 = "";
char* arr2 = "2";
ck_assert_uint_eq(strcspn(arr1, arr2), s21_strcspn(arr1, arr2));

#test strerror_1
int i = 0;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror_2
int i = 100;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror_3
int j = 230;
ck_assert_str_eq(strerror(j), s21_strerror(j));

#test strerror_4
int x = -2;
ck_assert_str_eq(strerror(x), s21_strerror(x));

#test strerror_5
int i = -5;
while (i++ < 200) ck_assert_str_eq(s21_strerror(i), strerror(i));

#test strpbrk_1
const char* arr1 = "text is a test";
const char* arr2 = "is";
ck_assert_str_eq(strpbrk(arr1, arr2), s21_strpbrk(arr1, arr2));

#test strpbrk_2
const char* array1 = "";
const char* array2 = "is";
ck_assert_pstr_eq(strpbrk(array1, array2), s21_strpbrk(array1, array2));

#test strpbrk_3
const char* array1 = "124";
const char* array2 = "test";
ck_assert_pstr_eq(strpbrk(array1, array2), s21_strpbrk(array1, array2));

#test strpbrk_4
const char* array1 = "Test is a text";
const char* array2 = "IS";
ck_assert_pstr_eq(strpbrk(array1, array2), s21_strpbrk(array1, array2));

#test strpbrk_5
const char* array1 = "";
const char* array2 = "IS";
ck_assert_ptr_eq(strpbrk(array1, array2), s21_strpbrk(array1, array2));

#test strpbrk_6
const char* array1 = "";
const char* array2 = "";
ck_assert_ptr_eq(strpbrk(array1, array2), s21_strpbrk(array1, array2));

#test memchr2

ck_assert_ptr_eq(s21_memchr("", 'a', 10), memchr("", 'a', 10));

#test memchr3

ck_assert_str_eq(s21_memchr("12a123", 'a', 4), memchr("12a123", 'a', 4));

#test memchr4

ck_assert_str_eq(s21_memchr("a", 'a', 10), memchr("a", 'a', 10));


#test memcpy1

char str1[8] = "abcdefg";
char str2[11] = "1234567890";

ck_assert_ptr_eq(s21_memcpy(str1, str2, 3), memcpy(str1, str2, 3));

#test memcpy2

char str2[11] = "1234567890";
char str5[11] = "1234567890";

ck_assert_str_eq(s21_memcpy(str2, str2 + 2, 5), memcpy(str5, str5 + 2, 5));

#test memcpy3

char str2[11] = "1234567890";
char str5[11] = "1234567890";

ck_assert_str_eq(s21_memcpy(str2, "563456", 3), memcpy(str5, "563456", 3));

#test memmove1

char str3[8] = "abcdefg";
char str4[11] = "1234567890";

ck_assert_ptr_eq(s21_memmove(str3, str4, 3), memmove(str3, str4, 3));

#test memmove2

char str3[8] = "abcdefg";
char str4[11] = "1234567890";

ck_assert_str_eq(s21_memmove(str3, str4, 8), memmove(str3, str4, 8));

#test memmove3

char str4[11] = "1234567890";
char str6[11] = "1234567890";

ck_assert_str_eq(s21_memmove(str4 + 3, str4, 5), memmove(str6 + 3, str6, 5));

#test memmove4

char str4[20] = "1234567890fgbdf";
char str6[11] = "1234567890";

ck_assert_str_eq(s21_memmove(str6, str4, 10), memmove(str6, str4, 10));

#test to_upper1
char str1[] = "abc";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC");
free(str2);

#test to_upper2
char str1[] = "aBc";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC");
free(str2);

#test to_upper3
char str1[] = "abC";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC");
free(str2);

#test to_upper4
char str1[] = "ABC";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC");
free(str2);

#test to_upper5
char str1[] = "123";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "123");
free(str2);

#test to_upper6
char str1[] = "123abc";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "123ABC");
free(str2);

#test to_upper7
char str1[] = "aBaBc";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABABC");
free(str2);

#test to_upper8
char str1[] = ".,/.,/.,";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, ".,/.,/.,");
free(str2);

#test to_upper9
char str1[] = "09876abc";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "09876ABC");
free(str2);

#test to_upper10
char str1[] = "abc123";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC123");
free(str2);

#test to_upper11
char str1[] = " ";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, " ");
free(str2);

#test to_upper12
char str1[] = "";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "");
free(str2);

#test to_upper13
char str1[] = "a1a1a1";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "A1A1A1");
free(str2);

#test to_upper14
char str1[] = " a1a1a1";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, " A1A1A1");
free(str2);

#test to_upper15
char str1[] = "a1a1a1 ";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "A1A1A1 ");
free(str2);

#test to_upper16
char str1[] = "Aa1a1a1";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "AA1A1A1");
free(str2);

#test to_upper17
char str1[] = "a1a1a1A";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "A1A1A1A");
free(str2);

#test to_upper18
char str1[] = "a1a1\0a1";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "A1A1\0A1");
free(str2);

#test to_upper19
char str1[] = "a1a\n1a1";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "A1A\n1A1");
free(str2);

#test to_upper20
char str1[] = "abcdefghijklmnopqrstuvwxyz";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
free(str2);

#test to_upper21
char str1[] = ")(*&^YTRYUIKJHWR<LR3.,tmwnrg.";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, ")(*&^YTRYUIKJHWR<LR3.,TMWNRG.");
free(str2);

#test to_upper22
char str1[] = " ";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, " ");
free(str2);

#test to_upper23
char str1[] = "ABC";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "ABC");
free(str2);

#test to_upper24
char str1[] = "_az";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "_AZ");
free(str2);

#test to_upper25
char str1[] = "SDFGHJKLPOIUYTREWQWERTYUIOP[OIUYTRFGHJKLJHBVNMASDFGHJKLPOIUYTREWQWERTYUIO";
char *str2 = s21_to_upper(str1);
ck_assert_str_eq(str2, "SDFGHJKLPOIUYTREWQWERTYUIOP[OIUYTRFGHJKLJHBVNMASDFGHJKLPOIUYTREWQWERTYUIO");
free(str2);

#test to_lower1
char str1[] = "ABC";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abc");
free(str2);

#test to_lower2
char str1[] = "aBc";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abc");
free(str2);

#test to_lower3
char str1[] = "abC";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abc");
free(str2);

#test to_lower4
char str1[] = "ABC";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abc");
free(str2);

#test to_lower5
char str1[] = "123";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "123");
free(str2);

#test to_lower6
char str1[] = "123ABC";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "123abc");
free(str2);

#test to_lower7
char str1[] = "aBaBc";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "ababc");
free(str2);

#test to_lower8
char str1[] = ".,/.,/.,";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, ".,/.,/.,");
free(str2);

#test to_lower9
char str1[] = "09876ABC";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "09876abc");
free(str2);

#test to_lower10
char str1[] = "ABC123";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abc123");
free(str2);

#test to_lower11
char str1[] = " ";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, " ");
free(str2);

#test to_lower12
char str1[] = "";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "");
free(str2);

#test to_lower13
char str1[] = "A1A1A1";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "a1a1a1");
free(str2);

#test to_lower14
char str1[] = " A1A1A1";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, " a1a1a1");
free(str2);

#test to_lower15
char str1[] = "A1A1A1 ";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "a1a1a1 ");
free(str2);

#test to_lower16
char str1[] = "AA1A1A1";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "aa1a1a1");
free(str2);

#test to_lower17
char str1[] = "A1a1A1A";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "a1a1a1a");
free(str2);

#test to_lower18
char str1[] = "A1A1\0a1";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "a1a1\0a1");
free(str2);

#test to_lower19
char str1[] = "A1a\n1A1";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "a1a\n1a1");
free(str2);

#test to_lower20
char str1[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char *str2 = s21_to_lower(str1);
ck_assert_str_eq(str2, "abcdefghijklmnopqrstuvwxyz");
free(str2);

#test insert1
char str1[] = "abc";
char str2[] = "def";
int n = 3;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abcdef");
free(str3);

#test insert2
char str1[] = "abc";
char str2[] = "def";
int n = 2;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abdefc");
free(str3);

#test insert3
char str1[] = "abc";
char str2[] = "def";
int n = 1;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "adefbc");
free(str3);

#test insert4
char str1[] = "abc";
char str2[] = "def";
int n = 0;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "defabc");
free(str3);

#test insert5
char str1[] = "abcdefghijkl123456789";
char str2[] = "xyz";
int n = 5;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abcdexyzfghijkl123456789");
free(str3);

#test insert6
char str1[] = "abc";
char str2[] = "";
int n = 0;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abc");
free(str3);

#test insert7
char str1[] = "abc";
char str2[] = "";
int n = 1;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abc");
free(str3);

#test insert8
char str1[] = "abc";
char str2[] = "";
int n = 3;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abc");
free(str3);

#test insert9
char str1[] = "";
char str2[] = "abc";
int n = 1;
char *str3 = s21_insert(str1, str2, n);
ck_assert_pstr_eq(str3, S21_NULL);
free(str3);

#test insert10
char str1[] = "";
char str2[] = "abc";
int n = 0;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "abc");
free(str3);

#test insert11
char str1[] = "";
char str2[] = "abc";
int n = 3;
char *str3 = s21_insert(str1, str2, n);
ck_assert_pstr_eq(str3, S21_NULL);
free(str3);

#test insert12
char str1[] = "";
char str2[] = "";
int n = 3;
char *str3 = s21_insert(str1, str2, n);
ck_assert_pstr_eq(str3, S21_NULL);
free(str3);

#test insert13
char str1[] = "";
char str2[] = "";
int n = 0;
char *str3 = s21_insert(str1, str2, n);
ck_assert_str_eq(str3, "");
free(str3);

#test trim1
char str1[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char str2[] = "ABC";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "DEFGHIJKLMNOPQRSTUVWXYZ");
free(str3);

#test trim2
char str1[] = "ABCDEFGHIabcABCPQRSTUVWXYZ";
char str2[] = "ABC";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "DEFGHIabcABCPQRSTUVWXYZ");
free(str3);

#test trim3
char str1[] = "ABCDEFGHIabcABCPQRSTUVWXYZABC";
char str2[] = "ABC";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "DEFGHIabcABCPQRSTUVWXYZ");
free(str3);

#test trim4
char str1[] = "ABCDEFGHIabcABCPQRSTUVWXYZabc";
char str2[] = "ABC";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "DEFGHIabcABCPQRSTUVWXYZabc");
free(str3);

#test trim5
char str1[] = "ABCDEFGHIabcABCPQRSTUVWXYZabc";
char str2[] = "abc";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "ABCDEFGHIabcABCPQRSTUVWXYZ");
free(str3);

#test trim6
char str1[] = "abc123abc";
char str2[] = "abc";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "123");
free(str3);

#test trim7
char str1[] = "abc123abc456abc";
char str2[] = "abc";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "123abc456");
free(str3);

#test trim8
char str1[] = "a1bc123abc456a1bc";
char str2[] = "abc";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "1bc123abc456a1");
free(str3);

#test trim9
char str1[] = "a1bc123abc456a1bc";
char str2[] = "a1bc";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "23abc456");
free(str3);

#test trim10
char str1[] = "abc123abc456a1bc";
char str2[] = "ab2c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "123abc456a1");
free(str3);

#test trim11
char str1[] = "abc123abc456a1bc";
char str2[] = "ab12c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "3abc456");
free(str3);

#test trim12
char str1[] = "abAc123abc456aB1bc";
char str2[] = "ab12c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "Ac123abc456aB");
free(str3);

#test trim13
char str1[] = "abAc123abc456aB1bc";
char str2[] = "aBb12c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "Ac123abc456");
free(str3);

#test trim14
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "aBbA12c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "333444aaaBaabaA53332244445677Babab7878998");
free(str3);

#test trim15
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "4aB3bA12c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "53332244445677Babab7878998");
free(str3);

#test trim16
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "4aB37bA897c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "11222333444aaaBaabaA533322444456");
free(str3);

#test trim17
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "4223aB437bA189117c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "533322444456");
free(str3);

#test trim18
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "4223aB6437bA1589117c";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "");
free(str3);

#test trim19
char str1[] = "11222333444aaaBaabaA53332244445677Babab7878998";
char str2[] = "jK";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "11222333444aaaBaabaA53332244445677Babab7878998");
free(str3);

#test trim20
char str1[] = "";
char str2[] = "jK";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "");
free(str3);

#test trim21
char str1[] = "sdfghjk";
char str2[] = " ";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "sdfghjk");
free(str3);

#test trim22
char str1[] = "sdfg hjk";
char str2[] = " ";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "sdfg hjk");
free(str3);

#test trim23
char str1[] = " ";
char str2[] = " ";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "");
free(str3);

#test trim24
char str1[] = "a231546yutiljkhgtyre565786oiu;jlkhb12";
char str2[] = "12333333333333333333333333333333333ab";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "546yutiljkhgtyre565786oiu;jlkh");
free(str3);

#test trim25
char str1[] = "a231546yutiljkhgtyre565786oiu;jlkhb12";
char str2[] = "12333333333333333333333333333333333abmmmmmm";
char *str3 = s21_trim(str1, str2);
ck_assert_str_eq(str3, "546yutiljkhgtyre565786oiu;jlkh");
free(str3);

#test strerror0
int i = 0;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror1
int i = 1;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror2
int i = 2;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror3
int i = 3;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror4
int i = 4;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror5
int i = 5;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror6
int i = 6;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror7
int i = 7;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror8
int i = 8;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror9
int i = 9;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror10
int i = 10;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror11
int i = 11;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror12
int i = 12;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror13
int i = 13;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror14
int i = 14;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror15
int i = 15;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror16
int i = 16;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror17
int i = 17;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror18
int i = 18;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror19
int i = 19;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror20
int i = 20;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror21
int i = 21;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror22
int i = 22;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror23
int i = 23;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror24
int i = 24;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror25
int i = 25;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror26
int i = 26;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror27
int i = 27;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror28
int i = 28;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror29
int i = 29;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror30
int i = 30;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror31
int i = 31;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror32
int i = 32;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror33
int i = 33;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror34
int i = 34;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror35
int i = 35;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror36
int i = 36;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror37
int i = 37;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror38
int i = 38;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror39
int i = 39;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror40
int i = 40;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror41
int i = 41;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror42
int i = 42;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror43
int i = 43;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror44
int i = 44;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror45
int i = 45;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror46
int i = 46;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror47
int i = 47;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror48
int i = 48;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror49
int i = 49;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror50
int i = 50;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror51
int i = 51;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror52
int i = 52;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror53
int i = 53;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror54
int i = 54;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror55
int i = 55;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror56
int i = 56;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror57
int i = 57;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror58
int i = 58;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror59
int i = 59;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror60
int i = 60;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror61
int i = 61;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror62
int i = 62;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror63
int i = 63;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror64
int i = 64;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror65
int i = 65;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror66
int i = 66;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror67
int i = 67;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror68
int i = 68;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror69
int i = 69;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror70
int i = 70;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror71
int i = 71;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror72
int i = 72;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror73
int i = 73;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror74
int i = 74;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror75
int i = 75;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror76
int i = 76;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror77
int i = 77;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror78
int i = 78;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror79
int i = 79;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror80
int i = 80;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror81
int i = 81;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror82
int i = 82;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror83
int i = 83;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror84
int i = 84;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror85
int i = 85;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror86
int i = 86;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror87
int i = 87;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror88
int i = 88;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror89
int i = 89;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror90
int i = 90;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror91
int i = 91;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror92
int i = 92;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror93
int i = 93;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror94
int i = 94;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror95
int i = 95;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror96
int i = 96;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror97
int i = 97;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror98
int i = 98;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror99
int i = 99;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror100
int i = 100;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror101
int i = 101;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror102
int i = 102;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror103
int i = 103;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror104
int i = 104;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror105
int i = 105;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror106
int i = 106;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror107
int i = 107;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror108
int i = 108;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror__1
int i = -1;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test strerror109
int i = 109;
ck_assert_str_eq(strerror(i), s21_strerror(i));

#test sprintf_1
char str1[BUFFSIZE];
char str2[BUFFSIZE];
char *format = "This is a simple value %d";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf_2
char str1[BUFFSIZE];
char str2[BUFFSIZE];
char *format = "%.5i";
int val = 69;
ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));
ck_assert_str_eq(str1, str2);

#test sprintf3
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%5d";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf4
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-5i";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf5
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%+12d";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf6
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%012i";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf7
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%0*d";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, 5, val),
                     sprintf(str2, format, 5, val));

    ck_assert_str_eq(str1, str2);



#test sprintf8
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%0.*i";
    int val = 69;
    ck_assert_int_eq(s21_sprintf(str1, format, 5, val),
                     sprintf(str2, format, 5, val));

    ck_assert_str_eq(str1, str2);



#test sprintf9
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char format[] = "%0.*i %d %4.*i %013d %d";
    int val = 69;
    ck_assert_int_eq(
        s21_sprintf(str1, format, 5, val, -10431, 13, 5311, 0, -581813581),
        sprintf(str2, format, 5, val, -10431, 13, 5311, 0, -581813581));

    ck_assert_str_eq(str1, str2);



#test sprintf10
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%+5.31li";
    long int val = 698518581899;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf11
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%.0d";
    int val = 0;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf12
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "% d";
    int val = 0;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf13 
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf14
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%15u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf15
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-16u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf16
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%.51u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf17
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "% 5.51u";
    unsigned int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf18
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%u";
    ck_assert_int_eq(s21_sprintf(str1, format, 0),
                     sprintf(str2, format, (unsigned)0));

    ck_assert_str_eq(str1, str2);



#test sprintf19
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%c";
    char val = 'X';
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf20
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%.5c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf21
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "% -5c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf22
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%15c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf23
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-5.3c%c%c%c%c Hello! ABOBA";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val, 'c', 'a', 'b', 'b'),
                     sprintf(str2, format, val, 'c', 'a', 'b', 'b'));

    ck_assert_str_eq(str1, str2);



#test sprintf24
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-5.3c";
    char val = 'c';
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf25
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf26
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%.15s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf27
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%15s";
    char *val = "69 IS MY FAVORITE NUMBER";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf100
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-15.9s";
    char *val = "69 IS MY FAVORITE NUMBER";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf28
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf29
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%s%s%s%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    char *s1 = "";
    char *s2 = "87418347813748913749871389480913";
    char *s3 = "HAHAABOBASUCKER";
    ck_assert_int_eq(s21_sprintf(str1, format, val, s1, s2, s3),
                     sprintf(str2, format, val, s1, s2, s3));

    ck_assert_str_eq(str1, str2);



#test sprintf30
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%s%s%s%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    char *s1 = "";
    char *s2 = "87418347813748913749871389480913";
    char *s3 = "HAHAABOBASUCKER";
    ck_assert_int_eq(s21_sprintf(str1, format, val, s1, s2, s3),
                     sprintf(str2, format, val, s1, s2, s3));

    ck_assert_str_eq(str1, str2);



#test sprintf31
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%s%s%s%s";
    char *val =
        "69 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    char *s1 = "";
    char *s2 = "87418347813748913749871389480913";
    char *s3 = "HAHAABOBASUCKER";
    ck_assert_int_eq(s21_sprintf(str1, format, val, s1, s2, s3),
                     sprintf(str2, format, val, s1, s2, s3));

    ck_assert_str_eq(str1, str2);



#test sprintf32
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char *val = "kjafdiuhfjahfjdahf";
    char *format = "%120s";
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf34
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char *format = "% f";
    float val = 0;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf35
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    ck_assert_int_eq(s21_sprintf(str1, "abc"), sprintf(str2, "abc"));

    ck_assert_str_eq(str1, str2);



#test sprintf36
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "abc"), sprintf(str2, "abc"));

    ck_assert_str_eq(str1, str2);



#test sprintf37
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%c", '\t'), sprintf(str2, "%c", '\t'));

    ck_assert_str_eq(str1, str2);



#test sprintf38
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's'),
                     sprintf(str2, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's'));

    ck_assert_str_eq(str1, str2);



#test sprintf39
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%s", "Drop Sega PLS"),
                     sprintf(str2, "%s", "Drop Sega PLS"));

    ck_assert_str_eq(str1, str2);



#test sprintf40
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS"),
        sprintf(str2, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS"));



#test sprintf41
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%d", 666), sprintf(str2, "%d", 666));

    ck_assert_str_eq(str1, str2);



#test sprintf42
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%d", 666), sprintf(str2, "%d", 666));

    ck_assert_str_eq(str1, str2);



#test sprintf43
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%d%d%d%d", -999, 0, 666, -100),
                     sprintf(str2, "%d%d%d%d", -999, 0, 666, -100));

    ck_assert_str_eq(str1, str2);



#test sprintf44
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%i", -0), sprintf(str2, "%i", -0));

    ck_assert_str_eq(str1, str2);



#test sprintf45
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%i%i%i%i", -999, 0, 666, -100),
                     sprintf(str2, "%i%i%i%i", -999, 0, 666, -100));

    ck_assert_str_eq(str1, str2);



#test sprintf46
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%f", 0.0001),
                     sprintf(str2, "%f", 0.0001));

    ck_assert_str_eq(str1, str2);



#test sprintf48
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%8c", '\t'),
                     sprintf(str2, "%8c", '\t'));

    ck_assert_str_eq(str1, str2);



#test sprintf49
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%8c", '\t'),
                     sprintf(str2, "%8c", '\t'));

    ck_assert_str_eq(str1, str2);



#test sprintf50
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(s21_sprintf(str1, "%-8c", '\t'),
                     sprintf(str2, "%-8c", '\t'));

    ck_assert_str_eq(str1, str2);



#test sprintf51
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    ck_assert_int_eq(
        s21_sprintf(str1, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's'),
        sprintf(str2, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's'));

    ck_assert_str_eq(str1, str2);



#test sprintf53
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%1.1f";

    ck_assert_int_eq(s21_sprintf(str1, format, 1.1),
                     sprintf(str2, format, 1.1));

    ck_assert_str_eq(str1, str2);



#test sprintf54
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%8.3c";

    ck_assert_int_eq(s21_sprintf(str1, format, 'a'),
                     sprintf(str2, format, 'a'));

    ck_assert_str_eq(str1, str2);



#test sprintf55
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%+5.5d aboba";

    int val = 10000;
    int a = s21_sprintf(str1, format, val);
    int b = sprintf(str2, format, val);
    ck_assert_int_eq(a, b);

    ck_assert_str_eq(str1, str2);



#test sprintf56
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%7.7f";

    ck_assert_int_eq(s21_sprintf(str1, format, 11.123456),
                     sprintf(str2, format, 11.123456));

    ck_assert_str_eq(str1, str2);



#test sprintf57
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%7.4s";

    ck_assert_int_eq(s21_sprintf(str1, format, "aboba floppa"),
                     sprintf(str2, format, "aboba floppa"));

    ck_assert_str_eq(str1, str2);



#test sprintf58
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "% c";

    ck_assert_int_eq(s21_sprintf(str1, format, 'a'),
                     sprintf(str2, format, 'a'));

    ck_assert_str_eq(str1, str2);



#test sprintf59
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "% s";

    ck_assert_int_eq(s21_sprintf(str1, format, "aboba likes floppa"),
                     sprintf(str2, format, "aboba likes floppa"));

    ck_assert_str_eq(str1, str2);



#test sprintf60
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "% s% c";

    ck_assert_int_eq(s21_sprintf(str1, format, "", 'f'),
                     sprintf(str2, format, "", 'f'));

    ck_assert_str_eq(str1, str2);



#test sprintf61
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%210s";

    ck_assert_int_eq(s21_sprintf(str1, format, "AHHAHAHA\0AHHAHAHAH"),
                     sprintf(str2, format, "AHHAHAHA\0AHHAHAHAH"));

    ck_assert_str_eq(str1, str2);



#test sprintf62
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%-115s";

    ck_assert_int_eq(s21_sprintf(str1, format, "Nick her"),
                     sprintf(str2, format, "Nick her"));

    ck_assert_str_eq(str1, str2);



#test sprintf63
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%1.1f";

    ck_assert_int_eq(s21_sprintf(str1, format, 121.123),
                     sprintf(str2, format, 121.123));

    ck_assert_str_eq(str1, str2);



#test sprintf64
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%+5li";
    long int val = 698518581899;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf65
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%-16hi";
    short int val = 6958;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf66
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%0.*ld";
    long val = 8581385185;
    ck_assert_int_eq(s21_sprintf(str1, format, 5, val),
                     sprintf(str2, format, 5, val));

    ck_assert_str_eq(str1, str2);



#test sprintf67
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%hu";
    unsigned short int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf68
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%lu";
    unsigned long int val = 949149114140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf69
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%lu, %u, %hu, %.5u, %5.u";
    unsigned long int val = 949149114140;
    ck_assert_int_eq(
        s21_sprintf(str1, format, val, 14, 1441, 14414, 9681),
        sprintf(str2, format, val, (unsigned)14, (unsigned short)1441,
                (unsigned)14414, (unsigned)9681));

    ck_assert_str_eq(str1, str2);



#test sprintf70
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];

    char *format = "%hd";
    short int val = 14140;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf71
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char *format = "%10Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf72
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char *format = "%Lf";
    long double val = 15.35;
    ck_assert_int_eq(s21_sprintf(str1, format, val),
                     sprintf(str2, format, val));

    ck_assert_str_eq(str1, str2);



#test sprintf73
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char *format = "%f %f %Lf %f %Lf";
    double val1 = 1.2;
    double val2 = 1.3;
    long double val3 = 1.1;
    double val4 = 1.1;
    long double val5 = 1.61535;
    ck_assert_int_eq(s21_sprintf(str1, format, val1, val2, val3, val4, val5),
                     sprintf(str2, format, val1, val2, val3, val4, val5));

    ck_assert_str_eq(str1, str2);



#test sprintf74
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%hi%hd%hu";

    ck_assert_int_eq(s21_sprintf(str1, format, 666, -777, 111),
                     sprintf(str2, format, 666, -777, 111));

    ck_assert_str_eq(str1, str2);



#test sprintf75
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%+li%+lu%+d%+lf";

    ck_assert_int_eq(s21_sprintf(str1, format, -123, 321, -5555, -1213.123),
                     sprintf(str2, format, -123, 321, -5555, -1213.123));

    ck_assert_str_eq(str1, str2);



#test sprintf76
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%-11.11li%-35.5lu%-3.5ld%33.19Lf";
    long double k = 333.33213;

    ck_assert_int_eq(
        s21_sprintf(str1, format, 66666666666, 5555555555, 44444444444, k),
        sprintf(str2, format, 66666666666, 5555555555, 44444444444, k));

    ck_assert_str_eq(str1, str2);



#test sprintf77
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%0.0li\n%0.0lu\n%0.0ld\n%f";

    ck_assert_int_eq(
        s21_sprintf(str1, format, 1, 222, 33333333333, -166513.1232),
        sprintf(str2, format, 1, 222, 33333333333, -166513.1232));

    ck_assert_str_eq(str1, str2);



#test sprintf78
    char str1[BUFFSIZE];
    char str2[BUFFSIZE];
    char format[] = "%0.0hi%0.0hu%0.0hd%f";

    ck_assert_int_eq(
        s21_sprintf(str1, format, 1, 222, 33333333333, -166513.1232),
        sprintf(str2, format, 1, 222, 33333333333, -166513.1232));

    ck_assert_str_eq(str1, str2);

// test sscanf

#test s21_sscanf_c_test2
char c_original;
char c_fake;
char str[500] = "12345 test";
char str2[500] = "12345 test";
int n_org = sscanf(str, "12345 %c", &c_original);
int n_fke = s21_sscanf(str2, "12345 %c", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_c_test3
char c_original;
char c_fake;
char str[500] = "12345 test";
char str2[500] = "12345 test";
int n_org = sscanf(str, "1 %c", &c_original);
int n_fke = s21_sscanf(str2, "1 %c", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_c_test4
char c_original;
char c_fake;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "- %c", &c_original);
int n_fke = s21_sscanf(str2, "- %c", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_c_test5
char c_original;
char c_fake;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "%c", &c_original);
int n_fke = s21_sscanf(str2, "%c", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_c_test6
char c_original;
char c_fake;
char c_original2;
char c_fake2;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "-%c e%c", &c_original, &c_original2);
int n_fke = s21_sscanf(str2, "-%c e%c", &c_fake, &c_fake2);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_c_test7
char c_original;
char c_fake;
char c_original2;
char c_fake2;
char str[500] = "     -test 12345";
char str2[500] = "     -test 12345";
int n_org = sscanf(str, "%c %c", &c_original, &c_original2);
int n_fke = s21_sscanf(str2, "%c %c", &c_fake, &c_fake2);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test0
int c_original = 0;
int c_fake = 0;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "%d", &c_original);
int n_fke = s21_sscanf(str2, "%d", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test1
int c_original = 0;
int c_fake = 0;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "-%d", &c_original);
int n_fke = s21_sscanf(str2, "-%d", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test2
int c_original;
int c_fake;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "-test%d", &c_original);
int n_fke = s21_sscanf(str2, "-test%d", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test3
int c_original;
int c_fake;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "-test%2d", &c_original);
int n_fke = s21_sscanf(str2, "-test%2d", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test4
long int c_original;
long int c_fake;
char str[500] = "-test 12345";
char str2[500] = "-test 12345";
int n_org = sscanf(str, "-test%2ld", &c_original);
int n_fke = s21_sscanf(str2, "-test%2ld", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_d_test6
short int c_original;
short int c_fake;
char str[500] = "-1928479817248.981427";
char str2[500] = "-1928479817248.981427";
int n_org = sscanf(str, "%10hd", &c_original);
int n_fke = s21_sscanf(str2, "%10hd", &c_fake);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_d_test8
int c_original = 0;
int c_fake = 0;
int c_original2 = 0;
int c_fake2 = 0;
char str[500] = "-19284--79[[--817248.981427";
char str2[500] = "-19284--79[[--817248.981427";
int n_org = sscanf(str, "-%10d %d", &c_original, &c_original2);
int n_fke = s21_sscanf(str2, "-%10d %d", &c_fake, &c_fake2);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(c_original2, c_fake2);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_d_test9
int c_original = 0;
int c_fake = 0;
int c_original2 = 0;
int c_fake2 = 0;
int c_original3 = 0;
int c_fake3 = 0;
char str[500] = "-19284--79[[--817248.981427";
char str2[500] = "-19284--79[[--817248.981427";
int n_org = sscanf(str, "-%10d %d %2d", &c_original, &c_original2, &c_original3);
int n_fke = s21_sscanf(str2, "-%10d %d %2d", &c_fake, &c_fake3, &c_fake3);
ck_assert_int_eq(c_original, c_fake);
ck_assert_int_eq(c_original2, c_fake2);
ck_assert_int_eq(c_original3, c_fake3);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_i_test0
int i_org = 0;
int i_fke = 0;
char str[500] = "-123124";
char str2[500] = "-123124";
int n_org = sscanf(str, "%i", &i_org);
int n_fke = s21_sscanf(str2, "%i", &i_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);


#test s21_sscanf_i_test1
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "-123124 0xffe";
char str2[500] = "-123124 0xffe";
int n_org = sscanf(str, "-%i %i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "-%i %i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test2
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "05524 0xFFE";
char str2[500] = "05524 0xFFE";
int n_org = sscanf(str, "%i%i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%i%i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test3
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "-05524 \t -FFE";
char str2[500] = "-05524 \t -FFE";
int n_org = sscanf(str, "%7i%i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%7i%i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test4
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "-05524 asdasd-FFE";
char str2[500] = "-05524 asdasd-FFE";
int n_org = sscanf(str, "%3i%i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%3i%i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test5
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "55=24 \n-FFE";
char str2[500] = "55=24 \n-FFE";
int n_org = sscanf(str, "%i%i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%i%i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test6
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "55FF=E";
char str2[500] = "55FF=E";
int n_org = sscanf(str, "%i%1i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%i%1i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test8
int i_org = 0;
int i_fke = 0;
int i_org2 = 0;
int i_fke2 = 0;
char str[500] = "FFE0679";
char str2[500] = "FFE0679";
int n_org = sscanf(str, "%2i%4i", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%2i%4i", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test88
long int i_org = 0;
long int i_fke = 0;
short int i_org2 = 0;
short int i_fke2 = 0;
char str[500] = "FFE0679";
char str2[500] = "FFE0679";
int n_org = sscanf(str, "%li%hi", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "%li%hi", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test9
long int i_org = 0;
long int i_fke = 0;
short int i_org2 = 0;
short int i_fke2 = 0;
char str[500] = "FFEF0679";
char str2[500] = "FFEF0679";
int n_org = sscanf(str, "F%li%2hi", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "F%li%2hi", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test11
short int i_org = 0;
short int i_fke = 0;
short int i_org2 = 0;
short int i_fke2 = 0;
char str[500] = "FFEF0679";
char str2[500] = "FFEF0679";
int n_org = sscanf(str, "F%hi%2hi", &i_org, &i_org2);
int n_fke = s21_sscanf(str2, "F%hi%2hi", &i_fke, &i_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);
ck_assert_int_eq(i_org2, i_fke2);


#test s21_sscanf_i_test12
short int i_org = 0;
short int i_fke = 0;
char str[500] = "0xFFa";
char str2[500] = "0xFFa";
int n_org = sscanf(str, "%hi", &i_org);
int n_fke = s21_sscanf(str2, "%hi", &i_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);

#test s21_sscanf_i_test13
short int i_org = 0;
short int i_fke = 0;
char str[500] = "+0xFFa";
char str2[500] = "+0xFFa";
int n_org = sscanf(str, "%hi", &i_org);
int n_fke = s21_sscanf(str2, "%hi", &i_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_int_eq(i_org, i_fke);

// e tests
#test s21_sscanf_e_test0
float e_org = 0.;
float e_fke = 0.;
float e_org2 = 0.;
float e_fke2 = 0.;
float e_org3 = 0.;
float e_fke3 = 0.;
float e_org4 = 0.;
float e_fke4 = 0.;
char str[500] = "1.1e-2 1.1e+002 1.1e+ d";
char str2[500] = "1.1e-2 1.1e+002 1.1e+ d";
int n_org = sscanf(str, "%e %e %e %e", &e_org, &e_org2, &e_org3, &e_org4);
int n_fke = s21_sscanf(str2, "%e %e %e %e", &e_fke, &e_fke2, &e_fke3, &e_fke4);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_double_eq(e_org3, e_fke3);
ck_assert_double_eq(e_org4, e_fke4);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test1
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1111111 3123123.22212125";
char str2[500] = "1.1111111 3123123.22212125";
int n_org = sscanf(str, "%e %le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%e %le", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test2
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 +3.22212125";
char str2[500] = "-1.1111111 +3.22212125";
int n_org = sscanf(str, "%e %le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%e %le", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test3
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%3e %17le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%3e %17le", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test4
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-0.1111111 -3444.22212125";
char str2[500] = "-0.1111111 -3444.22212125";
int n_org = sscanf(str, "%1e %3le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1e %3le", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test6
long double e_org = 0;
long double e_fke = 0;
long double e_org2 = 0;
long double e_fke2 = 0;
char str[500] = "-111111110.1111111 -3444.22212125";
char str2[500] = "-111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%12Le %1Le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%12Le %1Le", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test7
long double e_org = 0;
long double e_fke = 0;
long double e_org2 = 0;
long double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%22Le %1Le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%22Le %1Le", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_ldouble_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test8
long double e_org = 0;
long double e_fke = 0;
long double e_org2 = 0;
long double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%100Le %1Le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%100Le %1Le", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_ldouble_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_e_test9
long double e_org = 0;
long double e_fke = 0;
long double e_org2 = 0;
long double e_fke2 = 0;
char str[500] = "111111110.1111111 -0.222155552125";
char str2[500] = "111111110.1111111 -0.222155552125";
int n_org = sscanf(str, "%1Le %1Le", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1Le %1Le", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_ldouble_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


// E

#test s21_sscanf_E_test0
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1 3.2";
char str2[500] = "1.1 3.2";
int n_org = sscanf(str, "%E %lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%E %lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test1
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1111111 3.22212125";
char str2[500] = "1.1111111 3.22212125";
int n_org = sscanf(str, "%E %lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%E %lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test2
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%E %lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%E %lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test3
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%3E %17lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%3E %17lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test4
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-0.1111111 -3444.22212125";
char str2[500] = "-0.1111111 -3444.22212125";
int n_org = sscanf(str, "%1E %5lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1E %5lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test5
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "0.1111111 3444.22212125";
char str2[500] = "0.1111111 3444.22212125";
int n_org = sscanf(str, "%1E %1lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1E %1lE", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test6
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-111111110.1111111 -3444.22212125";
char str2[500] = "-111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "-%12LE %1lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "-%12LE %1lE", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test7
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111120.1111111 -3444.22212125";
char str2[500] = "111111120.1111111 -3444.22212125";
int n_org = sscanf(str, "11%22LE %1lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "11%22LE %1lE", &e_fke, &e_fke2);
ck_assert_ldouble_lt(fabsl(e_org-e_fke), 1e-6);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test8
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "111%100LE %1lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "111%100LE %1lE", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_E_test9
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -0.222155552125";
char str2[500] = "111111110.1111111 -0.222155552125";
int n_org = sscanf(str, "11%1LE %1lE", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "11%1LE %1lE", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


// f
#test s21_sscanf_f_test0
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "1.1 3.2";
char str2[500] = "1.1 3.2";
int n_org = sscanf(str, "%f %lf", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%f %lf", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test1
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "1231231.11231231  -. 3111.2123123";
char str2[500] = "1231231.11231231  -. 3111.2123123";
int n_org = sscanf(str, "%f %lf", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%f %lf", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test2
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "-1231.11231231  -. -3111.2123123";
char str2[500] = "-1231.11231231  -. -3111.2123123";
int n_org = sscanf(str, "%f %lf", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%f %lf", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test3
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1111111 3.22212125";
char str2[500] = "1.1111111 3.22212125";
int n_org = sscanf(str, "%f %lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%f %lf", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test4
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%f %lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%f %lf", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test5
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%3f %17lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%3f %17lf", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test6
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-0.1111111 -3444.22212125";
char str2[500] = "-0.1111111 -3444.22212125";
int n_org = sscanf(str, "%1f -%3lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1f -%3lf", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);



#test s21_sscanf_f_test9
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%22Lf %1lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%22Lf %1lf", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test10
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%100Lf %1lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%100Lf %1lf", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test11
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -0.222155552125";
char str2[500] = "111111110.1111111 -0.222155552125";
int n_org = sscanf(str, "%1Lf %1lf", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1Lf %1lf", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test13
double e_org = 1;
double e_fke = 1;
char str[500] = "3e-1";
char str2[500] = "3e-1";
int n_org = sscanf(str, "%lf", &e_org);
int n_fke = s21_sscanf(str2, "%lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test14
long double e_org = 1;
long double e_fke = 1;
char str[500] = "3e-1";
char str2[500] = "3e-1";
int n_org = sscanf(str, "%Lf", &e_org);
int n_fke = s21_sscanf(str2, "%Lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test15
float e_org = 1;
float e_fke = 1;
char str[500] = "3e-1";
char str2[500] = "3e-1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_f_test16
float e_org = 1;
float e_fke = 1;
char str[500] = "3ee-1";
char str2[500] = "3ee-1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test17
float e_org = 1;
float e_fke = 1;
char str[500] = "3eE--1";
char str2[500] = "3eE--1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test18
float e_org = 1;
float e_fke = 1;
char str[500] = "3..5eE--1";
char str2[500] = "3..5eE--1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test19
float e_org = 1;
float e_fke = 1;
char str[500] = "3.5E+1";
char str2[500] = "3.5E+1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test20
double e_org = 1;
double e_fke = 1;
char str[500] = "3.5E+1";
char str2[500] = "3.5E+1";
int n_org = sscanf(str, "%lf", &e_org);
int n_fke = s21_sscanf(str2, "%lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test21
long double e_org = 1;
long double e_fke = 1;
char str[500] = "3.5E+1";
char str2[500] = "3.5E+1";
int n_org = sscanf(str, "%Lf", &e_org);
int n_fke = s21_sscanf(str2, "%Lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test22
long double e_org = 1;
long double e_fke = 1;
char str[500] = "-3.5E+1";
char str2[500] = "-3.5E+1";
int n_org = sscanf(str, "%Lf", &e_org);
int n_fke = s21_sscanf(str2, "%Lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test23
long double e_org = 1;
long double e_fke = 1;
char str[500] = "+3.5E+1";
char str2[500] = "+3.5E+1";
int n_org = sscanf(str, "%Lf", &e_org);
int n_fke = s21_sscanf(str2, "%Lf", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test24
float e_org = 1;
float e_fke = 1;
char str[500] = "3.5E-+1";
char str2[500] = "3.5E-+1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test25
float e_org = 1;
float e_fke = 1;
char str[500] = "3.5E++1";
char str2[500] = "3.5E++1";
int n_org = sscanf(str, "%f", &e_org);
int n_fke = s21_sscanf(str2, "%f", &e_fke);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_f_test26
float e_org = 1;
float e_fke = 1;
int n1 = 0;
int n2 = 0;
int d1 = 0;
int d2 = 0;
char str[500] = "3.5e-1     5";
char str2[500] = "3.5e-1     5";
int n_org = sscanf(str, "%f%n%d", &e_org, &n1, &d1);
int n_fke = s21_sscanf(str2, "%f%n%d", &e_fke, &n2, &d2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_int_eq(n_org, n_fke);

// g
#test s21_sscanf_g_test0
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "1.1 3.2";
char str2[500] = "1.1 3.2";
int n_org = sscanf(str, "%g %lg", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%g %lg", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test1
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "1231231.11231231  -. 3111.2123123";
char str2[500] = "1231231.11231231  -. 3111.2123123";
int n_org = sscanf(str, "%g  . %lg", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%g  . %lg", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test2
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "-1231.11231231  -. -3111.2123123";
char str2[500] = "-1231.11231231  -. -3111.2123123";
int n_org = sscanf(str, "-%g -%lg", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "-%g -%lg", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test3
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1111111 3.22212125";
char str2[500] = "1.1111111 3.22212125";
int n_org = sscanf(str, "%g %lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%g %lg", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test4
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 - - - -3.22212125";
char str2[500] = "-1.1111111 - - - -3.22212125";
int n_org = sscanf(str, "%g -%lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%g -%lg", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test5
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%3g %17lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%3g %17lg", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test6
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-0.1111111 -3444.22212125";
char str2[500] = "-0.1111111 -3444.22212125";
int n_org = sscanf(str, "%1g %3lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1g %3lg", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test7
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "0.1111111 3444.22212125";
char str2[500] = "0.1111111 3444.22212125";
int n_org = sscanf(str, "%1g 344%2lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1f 344%2lg", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test8
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-111111110.1111111 -3444.22212125";
char str2[500] = "-111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%12Lg %1lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%12Lg %1lg", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test9
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%22Lg %1lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%22Lg %1lg", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test10
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%100Lg %1lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%100Lg %1lg", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_g_test11
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -0.222155552125";
char str2[500] = "111111110.1111111 -0.222155552125";
int n_org = sscanf(str, "%1Lg %1lg", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1Lg %1lg", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


// G

#test s21_sscanf_G_test0
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "1.1 3.2";
char str2[500] = "1.1 3.2";
int n_org = sscanf(str, "%G %lG", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "%G %lG", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);



#test s21_sscanf_G_test2
float f_org = 0;
float f_fke = 0;
double f_org2 = 0;
double f_fke2 = 0;
char str[500] = "-1231.11231231  -. -3111.2123123";
char str2[500] = "-1231.11231231  -. -3111.2123123";
int n_org = sscanf(str, "-%G -%lG", &f_org, &f_org2);
int n_fke = s21_sscanf(str2, "-%G -%lG", &f_fke, &f_fke2);
ck_assert_float_eq(f_org, f_fke);
ck_assert_double_eq(f_org2, f_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test3
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "1.1111111 3.22212125";
char str2[500] = "1.1111111 3.22212125";
int n_org = sscanf(str, "%G %lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%G %lG", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test4
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 - - - -3.22212125";
char str2[500] = "-1.1111111 - - - -3.22212125";
int n_org = sscanf(str, "%G -%lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%G -%lG", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test5
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-1.1111111 -3.22212125";
char str2[500] = "-1.1111111 -3.22212125";
int n_org = sscanf(str, "%3G %17lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%3G %17lG", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test7
float e_org = 0;
float e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "0.1111111 3444.22212125";
char str2[500] = "0.1111111 3444.22212125";
int n_org = sscanf(str, "%1G 344%1lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1G 344%1lG", &e_fke, &e_fke2);
ck_assert_float_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test8
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "-111111110.1111111 -3444.22212125";
char str2[500] = "-111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%12LG %1lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%12LG %1lG", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_G_test9
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -3444.22212125";
char str2[500] = "111111110.1111111 -3444.22212125";
int n_org = sscanf(str, "%22LG %1lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%22LG %1lG", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);



#test s21_sscanf_G_test11
long double e_org = 0;
long double e_fke = 0;
double e_org2 = 0;
double e_fke2 = 0;
char str[500] = "111111110.1111111 -0.222155552125";
char str2[500] = "111111110.1111111 -0.222155552125";
int n_org = sscanf(str, "%1LG %1lG", &e_org, &e_org2);
int n_fke = s21_sscanf(str2, "%1LG %1lG", &e_fke, &e_fke2);
ck_assert_ldouble_eq(e_org, e_fke);
ck_assert_double_eq(e_org2, e_fke2);
ck_assert_int_eq(n_org, n_fke);


// o
#test s21_sscanf_o_test0
unsigned int o_org = 0;
unsigned int o_fke = 0;
unsigned long int o_org2 = 0;
unsigned long int o_fke2 = 0;
unsigned short int o_org3 = 0;
unsigned short int o_fke3 = 0;
char str[500] = "0123 565 . -146";
char str2[500] = "0123 565 . -146";
int n_org = sscanf(str, "%o %lo %ho", &o_org, &o_org2, &o_org3);
int n_fke = s21_sscanf(str2, "%o %lo %ho", &o_fke, &o_fke2, &o_fke3);
ck_assert_uint_eq(o_org, o_fke);
ck_assert_uint_eq(o_org2, o_fke2);
ck_assert_uint_eq(o_org3, o_fke3);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_o_test1
unsigned int o_org = 0;
unsigned int o_fke = 0;
unsigned long int o_org2 = 0;
unsigned long int o_fke2 = 0;
unsigned short int o_org3 = 0;
unsigned short int o_fke3 = 0;
char str[500] = "0123 565 . -146";
char str2[500] = "0123 565 . -146";
int n_org = sscanf(str, "%1o %2lo %3ho", &o_org, &o_org2, &o_org3);
int n_fke = s21_sscanf(str2, "%1o %2lo %3ho", &o_fke, &o_fke2, &o_fke3);
ck_assert_uint_eq(o_org, o_fke);
ck_assert_uint_eq(o_org2, o_fke2);
ck_assert_uint_eq(o_org3, o_fke3);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_o_test2
unsigned int o_org = 0;
unsigned int o_fke = 0;
unsigned long int o_org2 = 0;
unsigned long int o_fke2 = 0;
unsigned short int o_org3 = 0;
unsigned short int o_fke3 = 0;
char str[500] = "0123 565 . -146";
char str2[500] = "0123 565 . -146";
int n_org = sscanf(str, "%1o %2lo %3ho", &o_org, &o_org2, &o_org3);
int n_fke = s21_sscanf(str2, "%1o %2lo %3ho", &o_fke, &o_fke2, &o_fke3);
ck_assert_uint_eq(o_org, o_fke);
ck_assert_uint_eq(o_org2, o_fke2);
ck_assert_uint_eq(o_org3, o_fke3);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_o_test3
unsigned int o_org = 0;
unsigned int o_fke = 0;
unsigned long int o_org2 = 0;
unsigned long int o_fke2 = 0;
unsigned short int o_org3 = 0;
unsigned short int o_fke3 = 0;
char str[500] = "015555555528 777 . -886 54 126";
char str2[500] = "015555555528 777 . -886 54 126";
unsigned char c1, c1_;
unsigned long long int c2, c2_;
int n_org = sscanf(str, "%25o %5lo %4ho %hho %llo", &o_org, &o_org2, &o_org3, &c1, &c2);
int n_fke = s21_sscanf(str2, "%25o %5lo %4ho %hho %llo", &o_fke, &o_fke2, &o_fke3, &c1_, &c2_);
ck_assert_uint_eq(o_org, o_fke);
ck_assert_uint_eq(o_org2, o_fke3);
ck_assert_uint_eq(o_org3, o_fke3);
ck_assert_int_eq(n_org, n_fke);

#test s21_sscanf_o_test4
unsigned int o_org = 0;
unsigned int o_fke = 0;
unsigned long int o_org2 = 0;
unsigned long int o_fke2 = 0;
unsigned short int o_org3 = 0;
unsigned short int o_fke3 = 0;
char str[500] = "+015555555528 777 . -886 54 126";
char str2[500] = "+015555555528 777 . -886 54 126";
unsigned char c1, c1_;
unsigned long long int c2, c2_;
int n_org = sscanf(str, "%25o %5lo %4ho %hho %llo", &o_org, &o_org2, &o_org3, &c1, &c2);
int n_fke = s21_sscanf(str2, "%25o %5lo %4ho %hho %llo", &o_fke, &o_fke2, &o_fke3, &c1_, &c2_);
ck_assert_uint_eq(o_org, o_fke);
ck_assert_uint_eq(o_org2, o_fke3);
ck_assert_uint_eq(o_org3, o_fke3);
ck_assert_int_eq(n_org, n_fke);



// s

#test s21_sscanf_s_test1
char str_org[500];
char str_fke[500];
char str[500] = "Hello test test test";
char str2[500] = "Hello test test test";
int n_org = sscanf(str, "%3s", str_org);
int n_fke = s21_sscanf(str2, "%3s", str_fke);
ck_assert_str_eq(str_org, str_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_s_test2
char str_org[500];
char str_fke[500];
char str[500] = "Hello test test test";
char str2[500] = "Hello test test test";
int n_org = sscanf(str, "%15s", str_org);
int n_fke = s21_sscanf(str2, "%15s", str_fke);
ck_assert_str_eq(str_org, str_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_s_test3
char str_org[500];
char str_fke[500];
char str[500] = "Hello test test test";
char str2[500] = "Hello test test test";
int n_org = sscanf(str, "%150s", str_org);
int n_fke = s21_sscanf(str2, "%150s", str_fke);
ck_assert_str_eq(str_org, str_fke);
ck_assert_int_eq(n_fke, n_org);


//#test s21_sscanf_s_test4
//char str_org[500];
//char str_fke[500];
//char str[500] = "Hello test test test";
//char str2[500] = "Hello test test test";
//int n_org = sscanf(str, " H%15s", str_org);
//int n_fke = s21_sscanf(str2, " H%15s", str_fke);
//ck_assert_str_eq(str_org, str_fke);
//ck_assert_int_eq(n_fke, n_org);

#test s21_sscanf_s_test5
char str_org[500];
char str_fke[500];
char str[500] = "   Hello test test test";
char str2[500] = "   Hello test test test";
int n_org = sscanf(str, "%15s", str_org);
int n_fke = s21_sscanf(str2, "%15s", str_fke);
ck_assert_str_eq(str_org, str_fke);
ck_assert_int_eq(n_fke, n_org);


// u
#test s21_sscanf_u_test0
unsigned int u_org = 0;
unsigned int u_fke = 0;
char str[500] = " 15...";
char str2[500] = " 15...";
int n_org = sscanf(str, "%u", &u_org);
int n_fke = s21_sscanf(str2, "%u", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test1
unsigned int u_org = 0;
unsigned int u_fke = 0;
char str[500] = " -15...";
char str2[500] = " -15...";
int n_org = sscanf(str, " %u", &u_org);
int n_fke = s21_sscanf(str2, " %u", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test3
unsigned int u_org = 0;
unsigned int u_fke = 0;
unsigned int u_org2 = 0;
unsigned int u_fke2 = 0;
char str[500] = " 15.124..";
char str2[500] = " 15.124..";
int c1, c1_;
int n_org = sscanf(str, " %2u.%3u..%n", &u_org, &u_org2, &c1);
int n_fke = s21_sscanf(str2, " %2u.%3u..%n", &u_fke, &u_fke2, &c1_);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test4
unsigned int u_org = 0;
unsigned int u_fke = 0;
unsigned int u_org2 = 0;
unsigned int u_fke2 = 0;
char str[500] = " -15 -. - .\0 124..";
char str2[500] = " -15 -. - .\0 124..";
int n_org = sscanf(str, " %1u %2u", &u_org, &u_org2);
int n_fke = s21_sscanf(str2, " %1u %2u", &u_fke, &u_fke2);
ck_assert_int_eq(n_fke, n_org);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);


#test s21_sscanf_u_test5
unsigned short int u_org = 0;
unsigned short int u_fke = 0;
char str[500] = " 15...";
char str2[500] = " 15...";
int n_org = sscanf(str, "%hu", &u_org);
int n_fke = s21_sscanf(str2, "%hu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test6
unsigned short int u_org = 0;
unsigned short int u_fke = 0;
char str[500] = " -15...";
char str2[500] = " -15...";
int n_org = sscanf(str, " %1hu", &u_org);
int n_fke = s21_sscanf(str2, " %1hu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test7
unsigned short int u_org = 0;
unsigned short int u_fke = 0;
char str[500] = " 15.124..";
char str2[500] = " 15.124..";
int n_org = sscanf(str, " %6hu", &u_org);
int n_fke = s21_sscanf(str2, " %6hu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test8
unsigned short int u_org = 0;
unsigned short int u_fke = 0;
unsigned short int u_org2 = 0;
unsigned short int u_fke2 = 0;
char str[500] = " 15.124..";
char str2[500] = " 15.124..";
int n_org = sscanf(str, " %2hu %3hu", &u_org, &u_org2);
int n_fke = s21_sscanf(str2, " %2hu %3hu", &u_fke, &u_fke2);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test9
unsigned short int u_org = 0;
unsigned short int u_fke = 0;
unsigned short int u_org2 = 0;
unsigned short int u_fke2 = 0;
char str[500] = " -15 -. - .\0 124..";
char str2[500] = " -15 -. - .\0 124..";
int n_org = sscanf(str, " %hu %hu", &u_org, &u_org2);
int n_fke = s21_sscanf(str2, " %hu %hu", &u_fke, &u_fke2);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test10
unsigned long int u_org = 0;
unsigned long int u_fke = 0;
char str[500] = " .15000000000...";
char str2[500] = " .15000000000...";
int n_org = sscanf(str, "%lu", &u_org);
int n_fke = s21_sscanf(str2, "%lu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test11
unsigned long int u_org = 0;
unsigned long int u_fke = 0;
char str[500] = " -15...";
char str2[500] = " -15...";
int n_org = sscanf(str, " %1lu", &u_org);
int n_fke = s21_sscanf(str2, " %1lu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test12
unsigned long int u_org = 0;
unsigned long int u_fke = 0;
char str[500] = " 15.124..";
char str2[500] = " 15.124..";
int n_org = sscanf(str, " %6lu", &u_org);
int n_fke = s21_sscanf(str2, " %6lu", &u_fke);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test13
unsigned long int u_org = 0;
unsigned long int u_fke = 0;
unsigned long int u_org2 = 0;
unsigned long int u_fke2 = 0;
char str[500] = " 15.124..";
char str2[500] = " 15.124..";
int n_org = sscanf(str, " %2lu %3lu", &u_org, &u_org2);
int n_fke = s21_sscanf(str2, " %2lu %3lu", &u_fke, &u_fke2);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);
ck_assert_int_eq(n_fke, n_org);


#test s21_sscanf_u_test14
unsigned long int u_org = 0;
unsigned long int u_fke = 0;
unsigned long int u_org2 = 0;
unsigned long int u_fke2 = 0;
char str[500] = " -15 -. - .\0 124..";
char str2[500] = " -15 -. - .\0 124..";
int n_org = sscanf(str, " %lu %lu", &u_org, &u_org2);
int n_fke = s21_sscanf(str2, " %lu %lu", &u_fke, &u_fke2);
ck_assert_uint_eq(u_org, u_fke);
ck_assert_uint_eq(u_org2, u_fke2);
ck_assert_int_eq(n_fke, n_org);


// X

#test s21_sscanf_X_test1
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%X", &x_org);
int n_fke = s21_sscanf(str2, "0%X", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test2
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%X", &x_org);
int n_fke = s21_sscanf(str2, "%X", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test3
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%X", &x_org);
int n_fke = s21_sscanf(str2, "%X", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test4
unsigned int x_org = 0;
unsigned int x_fke = 0;
unsigned int x_org2 = 0;
unsigned int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%X %X", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%X %X", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test5
unsigned int x_org = 0;
unsigned int x_fke = 0;
unsigned int x_org2 = 0;
unsigned int x_fke2 = 0;
char str[500] = "0xFFe,,,\0AAAa";
char str2[500] = "0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1X ,%3X", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1X ,%3X", &x_fke, &x_fke2);
ck_assert_uint_eq(x_org, x_fke);
ck_assert_int_eq(n_org, n_fke);


#test s21_sscanf_X_test6
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "%hX", &x_org);
int n_fke = s21_sscanf(str2, "%hX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test7
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%hX", &x_org);
int n_fke = s21_sscanf(str2, "0%hX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test8
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%hX", &x_org);
int n_fke = s21_sscanf(str2, "%hX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test9
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%hX", &x_org);
int n_fke = s21_sscanf(str2, "%hX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test10
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
unsigned short int x_org2 = 0;
unsigned short int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%hX %hX", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%hX %hX", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test11
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
unsigned short int x_org2 = 0;
unsigned short int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1hX ,%3hX", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1hX ,%3hX", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test14
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "%lX", &x_org);
int n_fke = s21_sscanf(str2, "%lX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test15
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%lX", &x_org);
int n_fke = s21_sscanf(str2, "0%lX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test16
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%lX", &x_org);
int n_fke = s21_sscanf(str2, "%lX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test17
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%lX", &x_org);
int n_fke = s21_sscanf(str2, "%lX", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test18
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
unsigned long int x_org2 = 0;
unsigned long int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%lX %lX", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%lX %lX", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_X_test19
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
unsigned long int x_org2 = 0;
unsigned long int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1lX ,%3lX", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1lX ,%3lX", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);

#test s21_sscanf_X_test20
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
unsigned long int x_org2 = 0;
unsigned long int x_fke2 = 0;
char str[500] = "+0xFFe,,,\0AAAa";
char str2[500] = "+0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1lX ,%3lX", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1lX ,%3lX", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);

// x

#test s21_sscanf_x_test0
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "%x", &x_org);
int n_fke = s21_sscanf(str2, "%x", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test1
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%x", &x_org);
int n_fke = s21_sscanf(str2, "0%x", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test2
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%x", &x_org);
int n_fke = s21_sscanf(str2, "%x", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test3
unsigned int x_org = 0;
unsigned int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%x", &x_org);
int n_fke = s21_sscanf(str2, "%x", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test4
unsigned int x_org = 0;
unsigned int x_fke = 0;
unsigned int x_org2 = 0;
unsigned int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%x %x", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%x %x", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test5
unsigned int x_org = 0;
unsigned int x_fke = 0;
unsigned int x_org2 = 0;
unsigned int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1x ,%3x", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1x ,%3x", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test6
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "%hx", &x_org);
int n_fke = s21_sscanf(str2, "%hx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test7
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%hx", &x_org);
int n_fke = s21_sscanf(str2, "0%hx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test8
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%hx", &x_org);
int n_fke = s21_sscanf(str2, "%hx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test9
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%hx", &x_org);
int n_fke = s21_sscanf(str2, "%hx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test10
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
unsigned short int x_org2 = 0;
unsigned short int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%hx %hx", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%hx %hx", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test11
unsigned short int x_org = 0;
unsigned short int x_fke = 0;
unsigned short int x_org2 = 0;
unsigned short int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1hx ,%3hx", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1hx ,%3hx", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test14
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "%lx", &x_org);
int n_fke = s21_sscanf(str2, "%lx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test15
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "0xFFe";
char str2[500] = "0xFFe";
int n_org = sscanf(str, "0%lx", &x_org);
int n_fke = s21_sscanf(str2, "0%lx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test16
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%lx", &x_org);
int n_fke = s21_sscanf(str2, "%lx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test17
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
char str[500] = "-0xFFe";
char str2[500] = "-0xFFe";
int n_org = sscanf(str, "%lx", &x_org);
int n_fke = s21_sscanf(str2, "%lx", &x_fke);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test18
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
unsigned long int x_org2 = 0;
unsigned long int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%lx %lx", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%lx %lx", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


#test s21_sscanf_x_test19
unsigned long int x_org = 0;
unsigned long int x_fke = 0;
unsigned long int x_org2 = 0;
unsigned long int x_fke2 = 0;
char str[500] = "-0xFFe,,,\0AAAa";
char str2[500] = "-0xFFe,,,\0AAAa";
int n_org = sscanf(str, "%1lx ,%3lx", &x_org, &x_org2);
int n_fke = s21_sscanf(str2, "%1lx ,%3lx", &x_fke, &x_fke2);
ck_assert_int_eq(n_org, n_fke);
ck_assert_uint_eq(x_org, x_fke);


// p